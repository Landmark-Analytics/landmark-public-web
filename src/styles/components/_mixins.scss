@use "variables";


// Hide content visually while keeping it accessible to assistive technologies
//
// See: https://www.a11yproject.com/posts/2013-01-11-how-to-hide-content/
// See: https://kittygiraudel.com/2016/10/13/css-hide-and-seek/

@mixin visually-hidden() {
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important; // Fix for https://github.com/twbs/bootstrap/issues/25686
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
  // Fix for positioned table caption that could become anonymous cells
  &:not(caption) {
    position: absolute !important;
  }
}

// Use to only display content when it's focused, or one of its child elements is focused
// (i.e. when focus is within the element/container that the class was applied to)
//
// Useful for "Skip to main content" links; see https://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1

@mixin visually-hidden-focusable() {
  &:not(:focus):not(:focus-within) {
    @include visually-hidden();
  }
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
@function breakpoint-min($name) {
  $min: map-get(variables.$grid-breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-infix($name) {
  @return if(breakpoint-min($name) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin breakpoint-up($name) {
  $min: breakpoint-min($name);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin make-grid-columns() {
  @each $breakpoint in map-keys(variables.$grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint);

    @include breakpoint-up($breakpoint) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      @for $i from 1 through variables.$grid-columns {
        .col#{$infix}-#{$i} {
          @include make-col($i);
        }
      }
    }
  }
}

@mixin make-col($size: false) {
  @if $size {
    flex: 0 0 auto;
    width: percentage(calc($size / variables.$grid-columns));
  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}
